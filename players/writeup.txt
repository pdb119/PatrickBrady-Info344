In order to create a searchable player database, I first determined which requirements I would need to make everything work. I knew that I would need some way to query the database containing the player information and a way to get that information back. I’m not completely sure about best practices for when to create classes in php, but I did the best I could.
I thought that the components responsible for connecting to the database, querying the database, and putting the results somewhere should be put into a class (DataConnection). The mysql query gets results from the players table and uses the LIKE operator with the WHERE clause, so that we can apply wildcards to the users search. This way if they only search for part of a players full name, all results will come up. The sql LOWER function is also used to that the search can be made independent of how the user entered the name; this works with “strtolower” that is applied to the user’s form input. For each row returned, the addPlayer function is called on the Players object (passed into the getData function, see below for Players class). This will store all the players that are retrieved from the data for later display on the page.
I then created another class which is responsible for holding information about the players, once it is retrieved from the database (Players). The Players class has two classes which help it to function.The Player class allows for a single object to be constructed to hold all of the information about a single player. I also created a PlayerIterator class which will allow for all the players in the Players class to be looped through, without giving public access to the internal array of the Players class.
The main php file contains the rest of the functions. The “main” function is responsible for creating the Players and DataConnection objects, as well as starting the query and calling the display function to show the players on the page.
The display function is provided with a Players object and displays the player information on the page in tables. A PlayerIterator is retrieved from the Players object and a while loop is used to iterate over all the players.
The displaySearchBox function is responsible for creating the form at the top of the page. It made sense to contain this in a function so that the last search term would be displayed in the search box or the search box would be blank if no search had been made yet. If a function hadn’t been used for this, html code would need to be repeated for the case where a search has been made and the case where one has not.
The final lines of php code at the bottom of the file are what is run immediately. If a search query is contained in the html request, first the search bar is displayed (containing that query), then the main function is called to get the player data. If no query is contained in the html request, an empty search box is simply displayed.
